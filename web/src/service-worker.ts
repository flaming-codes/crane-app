/// <reference lib="webworker" />

import { build, files, version } from '$service-worker';
import { adapter } from './sw/adapters/loki';

const worker = self as unknown as ServiceWorkerGlobalScope;
const FILES = `cache${version}`;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

const uncachableEndpoints = ['https://microanalytics.io/'];

worker.addEventListener('install', (event) => {
  event.waitUntil(
    caches
      .open(FILES)
      .then((cache) => cache.addAll(to_cache))
      .then(() => {
        worker.skipWaiting();
      })
  );
});

worker.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then(async (keys) => {
      // delete old caches
      for (const key of keys) {
        if (key !== FILES) await caches.delete(key);
      }

      await adapter.initIfNeeded({ deleteExisting: true });

      await worker.clients.claim();

      const clients = await worker.clients.matchAll();
      clients.forEach((client) =>
        client.postMessage({
          type: 'lifecycle',
          payload: 'activated'
        })
      );
    })
  );
});

function verifyUrlOrigin(url: URL) {
  return uncachableEndpoints.every((e) => !e.startsWith(url.origin));
}

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
  const cache = await caches.open(`offline${version}`);

  try {
    const response = await fetch(request);
    cache.put(request, response.clone());
    return response;
  } catch (err) {
    const response = await cache.match(request);
    if (response) return response;

    throw err;
  }
}

async function getTypeAheadSuggestion(params: { q: string }) {
  const { q } = params;

  await adapter.initIfNeeded();

  // const hit = await taDb.items.where('name').startsWith(q).first();
  const hits = await adapter.query(q);
  const hit = hits[0];

  const blob: BodyInit = new Blob([JSON.stringify(hit || {})], {
    type: 'application/json'
  });
  const init: ResponseInit = { status: 200 };
  return new Response(blob, init);
}

worker.addEventListener('fetch', (event) => {
  if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

  const url = new URL(event.request.url);

  // don't try to handle e.g. data: URIs
  const isHttp = url.protocol.startsWith('http');
  const isDevServerRequest =
    url.hostname === self.location.hostname && url.port !== self.location.port;
  const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
  const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

  // Intercept requests for typeahead suggestions.
  if (url.pathname === '/api/package/ta') {
    const q = url.searchParams.get('q') as string;
    if (q) {
      event.respondWith(getTypeAheadSuggestion({ q }));
    }

    return;
  }

  if (isHttp && !isDevServerRequest && !skipBecauseUncached && verifyUrlOrigin(url)) {
    event.respondWith(
      (async () => {
        // always serve static files and bundler-generated assets from cache.
        // if your application has other URLs with data that will never change,
        // set this variable to true for them and they will only be fetched once.
        const cachedAsset = isStaticAsset && (await caches.match(event.request));

        return cachedAsset || fetchAndCache(event.request);
      })()
    );
  }
});
